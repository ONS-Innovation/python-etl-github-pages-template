import logging
import os
from datetime import datetime
from pathlib import Path
from typing import Any, Optional

import boto3
import pandas as pd
from jinja2 import Environment, FileSystemLoader

logger = logging.getLogger(__name__)


class HTMLGenerator:
    """Class for generating HTML reports from processed data."""

    def __init__(self, template_dir: str = "templates"):
        """Initialise HTML generator with template directory.

        Args:
            template_dir: Directory containing HTML templates
        """
        self.template_dir = Path(template_dir)
        self.env = Environment(
            loader=FileSystemLoader(template_dir),
            autoescape=True,  # Enable autoescaping for all templates
        )

    def generate_data_report(
        self,
        df: pd.DataFrame,
        summary: dict[str, Any],
        output_path: str,
        title: str = "Data Report",
    ) -> bool:
        """Generate HTML data report from DataFrame and summary.

        Args:
            df: Processed DataFrame
            summary: Data processing summary
            output_path: Path to save HTML file
            title: Report title

        Returns:
            True if successful, False otherwise
        """
        try:
            logger.info(f"Generating HTML report to {output_path}")

            # Prepare data for template
            template_data = {
                "title": title,
                "generated_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                "summary": summary,
                "data_preview": df.head(10).to_html(classes="table table-striped", escape=False),
                "total_rows": len(df),
                "total_columns": len(df.columns),
                "columns": df.columns.tolist(),
                "data_types": df.dtypes.astype(str).to_dict(),
                "missing_values": df.isnull().sum().to_dict(),
                "numeric_summary": (
                    df.describe().to_html(classes="table table-striped")
                    if len(df.select_dtypes(include=["number"]).columns) > 0
                    else None
                ),
                # Add a banner message to the template context
                "public_access_banner": (
                    "⚠️ <strong>This site is publicly accessible.</strong> "
                    "If you have published sensitive data, please revert."
                ),
            }

            # Load and render template
            template = self.env.get_template("data_report.html")
            html_content = template.render(**template_data)
            # Insert the banner at the very top of the HTML content
            banner_html = (
                '<div style="background: #fff3cd; color: #856404; border: 1px solid #ffeeba; '
                'padding: 12px; text-align: center; font-weight: bold; font-size: 1.1em; margin-bottom: 20px;">'
                f'{template_data["public_access_banner"]}'
                '</div>'
            )
            html_content = banner_html + html_content

            # Ensure output directory exists
            output_dir = Path(output_path).parent
            output_dir.mkdir(parents=True, exist_ok=True)

            # Write HTML file
            with open(output_path, "w", encoding="utf-8") as f:
                f.write(html_content)

            logger.info(f"HTML report generated successfully: {output_path}")
            return True

        except Exception as e:
            logger.error(f"Error generating HTML report: {e!s}")
            return False

    def create_default_template(self, template_path: str) -> bool:
        """Create a default HTML template if none exists.

        Args:
            template_path: Path to create template file

        Returns:
            True if successful, False otherwise
        """
        try:
            template_content = """<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ title }}</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .summary-card { margin-bottom: 20px; }
        .metric { text-align: center; padding: 20px; }
        .metric h3 { color: #0d6efd; margin-bottom: 5px; }
        .table-container { max-height: 400px; overflow-y: auto; }
    </style>
</head>
<body>
    <div class="container mt-4">
        <div class="row">
            <div class="col-12">
                <h1 class="text-center mb-4">{{ title }}</h1>
                <p class="text-muted text-center">Generated on {{ generated_at }}</p>
            </div>
        </div>

        <div class="row summary-card">
            <div class="col-md-3">
                <div class="card metric">
                    <h3>{{ total_rows }}</h3>
                    <p class="mb-0">Total Rows</p>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card metric">
                    <h3>{{ total_columns }}</h3>
                    <p class="mb-0">Total Columns</p>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card metric">
                    <h3>{{ missing_values.values() | sum }}</h3>
                    <p class="mb-0">Missing Values</p>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card metric">
                    <h3>{{ (missing_values.values() | sum / total_rows * 100) | round(1) }}%</h3>
                    <p class="mb-0">Missing %</p>
                </div>
            </div>
        </div>

{% if summary %}
        <div class="row">
            <div class="col-12">
                <h3>Processing Summary</h3>
                <div class="card">
                    <div class="card-body">
                        <pre>{{ summary | tojson(indent=2) }}</pre>
                    </div>
                </div>
            </div>
        </div>
{% endif %}

        <div class="row mt-4">
            <div class="col-12">
                <h3>Data Preview (First 10 Rows)</h3>
                <div class="table-container">
                    {{ data_preview | safe }}
                </div>
            </div>
        </div>

{% if numeric_summary %}
        <div class="row mt-4">
            <div class="col-12">
                <h3>Statistical Summary</h3>
                <div class="table-container">
                    {{ numeric_summary | safe }}
                </div>
            </div>
        </div>
{% endif %}

        <div class="row mt-4">
            <div class="col-12">
                <h3>Column Information</h3>
                <div class="table-responsive">
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Column</th>
                                <th>Data Type</th>
                                <th>Missing Values</th>
                                <th>Missing %</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for column in columns %}
                            <tr>
                                <td>{{ column }}</td>
                                <td>{{ data_types[column] }}</td>
                                <td>{{ missing_values[column] }}</td>
                                <td>{{ (missing_values[column] / total_rows * 100) | round(1) }}%</td>
                            </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <footer class="bg-light text-center py-3 mt-5">
        <a class="mb-0 text-muted" href="https://github.com/${{values.repository_owner}}/${{values.repository_name}}">Generated by github.com/${{values.repository_owner}}/${{values.repository_name}}</a>
    </footer>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>"""

            # Ensure directory exists
            Path(template_path).parent.mkdir(parents=True, exist_ok=True)

            # Write template file
            with open(template_path, "w", encoding="utf-8") as f:
                f.write(template_content)

            logger.info(f"Default template created: {template_path}")
            return True

        except Exception as e:
            logger.error(f"Error creating default template: {e!s}")
            return False


class S3Deployer:
    """Class for deploying static websites to S3."""

    def __init__(
        self,
        bucket_name: str,
        aws_access_key_id: Optional[str] = None,
        aws_secret_access_key: Optional[str] = None,
        region_name: str = "us-east-1",
    ):
        """Initialise S3 deployer.

        Args:
            bucket_name: S3 bucket name
            aws_access_key_id: AWS access key (optional, can use env vars)
            aws_secret_access_key: AWS secret key (optional, can use env vars)
            region_name: AWS region
        """
        self.bucket_name = bucket_name
        self.region_name = region_name

        # Initialise S3 client
        session = boto3.Session(
            aws_access_key_id=aws_access_key_id or os.getenv("AWS_ACCESS_KEY_ID"),
            aws_secret_access_key=aws_secret_access_key or os.getenv("AWS_SECRET_ACCESS_KEY"),
            region_name=region_name,
        )
        self.s3_client = session.client("s3")

    def deploy_website(self, local_path: str, s3_prefix: str = "", enable_website: bool = True) -> Optional[str]:
        """Deploy local files to S3 and optionally enable static website hosting.

        Args:
            local_path: Local directory or file path to deploy
            s3_prefix: S3 key prefix (folder path in bucket)
            enable_website: Whether to enable S3 static website hosting

        Returns:
            Website URL if successful, None otherwise
        """
        try:
            logger.info(f"Deploying {local_path} to S3 bucket {self.bucket_name}")

            local_path = Path(local_path)

            if local_path.is_file():
                # Deploy single file
                s3_key = f"{s3_prefix}/{local_path.name}" if s3_prefix else local_path.name
                self._upload_file(local_path, s3_key)
                files_uploaded = [s3_key]
            elif local_path.is_dir():
                # Deploy directory
                files_uploaded = []
                for file_path in local_path.rglob("*"):
                    if file_path.is_file():
                        relative_path = file_path.relative_to(local_path)
                        s3_key = f"{s3_prefix}/{relative_path}" if s3_prefix else str(relative_path)
                        s3_key = s3_key.replace("\\", "/")  # Handle Windows paths
                        self._upload_file(file_path, s3_key)
                        files_uploaded.append(s3_key)
            else:
                raise FileNotFoundError(f"Local path not found: {local_path}")

            # Enable static website hosting if requested
            if enable_website:
                self._enable_static_website()

            # Generate website URL
            website_url = self._get_website_url()

            logger.info(f"Deployment successful. Website URL: {website_url}")
            logger.info(f"Uploaded {len(files_uploaded)} files")

            return website_url

        except Exception as e:
            logger.error(f"Error deploying to S3: {e!s}")
            return None

    def _upload_file(self, local_file: Path, s3_key: str) -> None:
        """Upload a single file to S3 with appropriate content type."""
        content_type = self._get_content_type(local_file.suffix)

        extra_args = {"ContentType": content_type}
        if local_file.suffix.lower() in [".html", ".htm"]:
            extra_args["CacheControl"] = "max-age=300"  # 5 minutes cache for HTML

        self.s3_client.upload_file(str(local_file), self.bucket_name, s3_key, ExtraArgs=extra_args)

        logger.debug(f"Uploaded {local_file} to s3://{self.bucket_name}/{s3_key}")

    def _enable_static_website(self) -> None:
        """Enable static website hosting on the S3 bucket."""
        try:
            website_config = {
                "IndexDocument": {"Suffix": "index.html"},
                "ErrorDocument": {"Key": "error.html"},
            }

            self.s3_client.put_bucket_website(Bucket=self.bucket_name, WebsiteConfiguration=website_config)

            logger.info("Static website hosting enabled")

        except Exception as e:
            logger.warning(f"Could not enable static website hosting: {e!s}")

    def _get_website_url(self) -> str:
        """Get the static website URL for the bucket."""
        if self.region_name == "us-east-1":
            return f"http://{self.bucket_name}.s3.us-east-1.amazonaws.com/${{values.repository_name}}/index.html"
        else:
            return f"http://{self.bucket_name}.s3.{self.region_name}.amazonaws.com/${{values.repository_name}}/index.html"

    def _get_content_type(self, file_extension: str) -> str:
        """Get appropriate content type for file extension."""
        content_types = {
            ".html": "text/html",
            ".htm": "text/html",
            ".css": "text/css",
            ".js": "application/javascript",
            ".json": "application/json",
            ".png": "image/png",
            ".jpg": "image/jpeg",
            ".jpeg": "image/jpeg",
            ".gif": "image/gif",
            ".svg": "image/svg+xml",
            ".ico": "image/x-icon",
            ".pdf": "application/pdf",
            ".csv": "text/csv",
        }
        return content_types.get(file_extension.lower(), "application/octet-stream")


def deploy_etl_results(
    df: pd.DataFrame,
    summary: dict[str, Any],
    bucket_name: str,
    project_name: str,
    aws_access_key_id: Optional[str] = None,
    aws_secret_access_key: Optional[str] = None,
    region_name: str = "us-east-1",
) -> Optional[str]:
    """Helper function to deploy ETL results as a static website.

    Args:
        df: Processed DataFrame
        summary: ETL processing summary
        bucket_name: S3 bucket name
        project_name: Project name for HTML title and S3 prefix
        aws_access_key_id: AWS access key
        aws_secret_access_key: AWS secret key
        region_name: AWS region

    Returns:
        Website URL if successful, None otherwise
    """
    try:
        # Create temporary directory for website files
        temp_dir = Path("temp_website")
        temp_dir.mkdir(exist_ok=True)

        # Create templates directory
        templates_dir = temp_dir / "templates"
        templates_dir.mkdir(exist_ok=True)

        # Initialise HTML generator
        html_generator = HTMLGenerator(str(templates_dir))

        # Create default template if it doesn't exist
        template_path = templates_dir / "data_report.html"
        if not template_path.exists():
            html_generator.create_default_template(str(template_path))

        # Generate HTML report
        html_path = temp_dir / "index.html"
        success = html_generator.generate_data_report(
            df, summary, str(html_path), title=f"{project_name} - Data Report"
        )

        if not success:
            return None

        # Initialise S3 deployer
        s3_deployer = S3Deployer(
            bucket_name=bucket_name,
            aws_access_key_id=aws_access_key_id,
            aws_secret_access_key=aws_secret_access_key,
            region_name=region_name,
        )

        # Deploy to S3
        website_url = s3_deployer.deploy_website(
            str(temp_dir),
            s3_prefix=project_name.lower().replace(" ", "-"),
            enable_website=True,
        )

        # Cleanup temporary directory
        import shutil

        shutil.rmtree(temp_dir)

        return website_url

    except Exception as e:
        logger.error(f"Error in deploy_etl_results: {e!s}")
        return None
