import logging
import os
import yaml
from datetime import datetime
from pathlib import Path
from typing import Any, Dict, Optional

import pandas as pd
from jinja2 import Environment, FileSystemLoader

logger = logging.getLogger(__name__)


class MarkdownGenerator:
    """Class for generating Markdown documentation from processed data."""

    def __init__(self, template_dir: str = "templates"):
        """Initialise Markdown generator with template directory.

        Args:
            template_dir: Directory containing Markdown templates
        """
        self.template_dir = Path(template_dir)
        self.env = Environment(
            loader=FileSystemLoader(template_dir),
            autoescape=False,  # Disable autoescaping for markdown
        )

    def generate_data_report(
        self,
        df: pd.DataFrame,
        summary: Dict[str, Any],
        output_path: str,
        title: str = "Data Report",
    ) -> bool:
        """Generate Markdown data report from DataFrame and summary.

        Args:
            df: Processed DataFrame
            summary: Data processing summary
            output_path: Path to save Markdown file
            title: Report title

        Returns:
            True if successful, False otherwise
        """
        try:
            logger.info(f"Generating Markdown report to {output_path}")

            # Prepare data for template
            template_data = {
                "title": title,
                "generated_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                "summary": summary,
                "data_preview": self._dataframe_to_markdown(df.head(10)),
                "total_rows": len(df),
                "total_columns": len(df.columns),
                "columns": df.columns.tolist(),
                "data_types": df.dtypes.astype(str).to_dict(),
                "missing_values": df.isnull().sum().to_dict(),
                "numeric_summary": (
                    self._dataframe_to_markdown(df.describe())
                    if len(df.select_dtypes(include=["number"]).columns) > 0
                    else None
                ),
                "repository_owner": "${{values.repository_owner}}",
                "repository_name": "${{values.repository_name}}",
            }

            # Load and render template
            template = self.env.get_template("data_report.md")
            markdown_content = template.render(**template_data)

            # Ensure output directory exists
            output_dir = Path(output_path).parent
            output_dir.mkdir(parents=True, exist_ok=True)

            # Write Markdown file
            with open(output_path, "w", encoding="utf-8") as f:
                f.write(markdown_content)

            logger.info(f"Markdown report generated successfully: {output_path}")
            return True

        except Exception as e:
            logger.error(f"Error generating Markdown report: {e!s}")
            return False

    def _dataframe_to_markdown(self, df: pd.DataFrame) -> str:
        """Convert DataFrame to Markdown table format.

        Args:
            df: DataFrame to convert

        Returns:
            Markdown formatted table string
        """
        if df.empty:
            return "*No data available*"

        # Convert DataFrame to markdown table
        markdown_lines = []
        
        # Header row
        headers = [""] + [str(col) for col in df.columns]
        markdown_lines.append("| " + " | ".join(headers) + " |")
        
        # Separator row
        separators = [":---"] * len(headers)
        markdown_lines.append("| " + " | ".join(separators) + " |")
        
        # Data rows
        for idx, row in df.iterrows():
            row_data = [str(idx)] + [str(val) for val in row]
            markdown_lines.append("| " + " | ".join(row_data) + " |")
        
        return "\n".join(markdown_lines)

    def create_default_template(self, template_path: str) -> bool:
        """Create a default Markdown template if none exists.

        Args:
            template_path: Path to create template file

        Returns:
            True if successful, False otherwise
        """
        try:
            template_content = """# {{ title }}

*Generated on {{ generated_at }}*

---

## Summary

This report contains analysis of the processed data from the ETL pipeline.

### Key Metrics

- **Total Rows**: {{ total_rows }}
- **Total Columns**: {{ total_columns }}
- **Missing Values**: {{ missing_values.values() | sum }}
- **Missing Percentage**: {{ ((missing_values.values() | sum) / total_rows * 100) | round(1) }}%

{% if summary %}
## Processing Summary

```json
{{ summary | tojson(indent=2) }}
```
{% endif %}

## Data Preview

The following table shows the first 10 rows of the processed data:

{{ data_preview }}

{% if numeric_summary %}
## Statistical Summary

{{ numeric_summary }}
{% endif %}

## Column Information

| Column | Data Type | Missing Values | Missing % |
|:---|:---|---:|---:|
{% for column in columns -%}
| {{ column }} | {{ data_types[column] }} | {{ missing_values[column] }} | {{ (missing_values[column] / total_rows * 100) | round(1) }}% |
{% endfor %}

---

*Report generated by [{{ repository_name }}](https://github.com/{{ repository_owner }}/{{ repository_name }})*
"""

            # Ensure directory exists
            Path(template_path).parent.mkdir(parents=True, exist_ok=True)

            # Write template file
            with open(template_path, "w", encoding="utf-8") as f:
                f.write(template_content)

            logger.info(f"Default Markdown template created: {template_path}")
            return True

        except Exception as e:
            logger.error(f"Error creating default template: {e!s}")
            return False


class MkDocsDeployer:
    """Class for preparing MkDocs documentation structure."""

    def __init__(
        self,
        docs_dir: str = "docs",
        site_name: str = "${{values.docs_site_name}}",
        site_description: str = "${{values.docs_site_description}}",
    ):
        """Initialise MkDocs deployer.

        Args:
            docs_dir: Directory for MkDocs documentation
            site_name: Name of the documentation site
            site_description: Description of the documentation site
        """
        self.docs_dir = Path(docs_dir)
        self.site_name = site_name
        self.site_description = site_description

    def setup_mkdocs_structure(self, project_name: str) -> bool:
        """Set up the MkDocs directory structure and configuration.

        Args:
            project_name: Name of the project

        Returns:
            True if successful, False otherwise
        """
        try:
            logger.info(f"Setting up MkDocs structure in {self.docs_dir}")

            # Create docs directory
            self.docs_dir.mkdir(exist_ok=True)

            # Create mkdocs.yml configuration
            mkdocs_config = {
                "site_name": self.site_name,
                "site_description": self.site_description,
                "site_url": f"https://${{values.repository_owner}}.github.io/${{values.repository_name}}/",
                "repo_url": f"https://github.com/${{values.repository_owner}}/${{values.repository_name}}",
                "repo_name": "${{values.repository_name}}",
                "docs_dir": "docs",
                "site_dir": "site",
                "theme": {
                    "name": "material",
                    "palette": {
                        "scheme": "default",
                        "primary": "blue",
                        "accent": "blue",
                    },
                    "features": [
                        "navigation.tabs",
                        "navigation.sections",
                        "navigation.expand",
                        "navigation.top",
                        "search.highlight",
                        "search.share",
                    ],
                },
                "markdown_extensions": [
                    "admonition",
                    "codehilite",
                    "pymdownx.superfences",
                    "pymdownx.tabbed",
                    "toc",
                    "tables",
                ],
                "nav": [
                    {"Home": "index.md"},
                    {"Data Report": "data_report.md"},
                ],
            }

            # Write mkdocs.yml to project root
            mkdocs_path = Path("mkdocs.yml")
            
            with open(mkdocs_path, "w", encoding="utf-8") as f:
                yaml.dump(mkdocs_config, f, default_flow_style=False, sort_keys=False)

            # Create index.md
            self._create_index_page()

            logger.info("MkDocs structure created successfully")
            return True

        except Exception as e:
            logger.error(f"Error setting up MkDocs structure: {e!s}")
            return False

    def _create_index_page(self) -> None:
        """Create the main index.md page."""
        index_content = f"""# {self.site_name}

{self.site_description}

## Overview

This documentation site contains the results and analysis from the ETL pipeline processing.

## Available Reports

- [Data Report](data_report.md) - Detailed analysis of the processed data including:
  - Data summary and statistics
  - Column information and data types
  - Missing value analysis
  - Sample data preview

## Project Information

- **Repository**: [${{values.repository_name}}](https://github.com/${{values.repository_owner}}/${{values.repository_name}})
- **Owner**: ${{values.repository_owner}}
- **Last Updated**: {datetime.now().strftime("%Y-%m-%d")}

---

*This documentation is automatically generated from the ETL pipeline results.*
"""

        index_path = self.docs_dir / "index.md"
        with open(index_path, "w", encoding="utf-8") as f:
            f.write(index_content)

    def deploy_documentation(self, markdown_files: Dict[str, str]) -> bool:
        """Deploy markdown files to the docs directory.

        Args:
            markdown_files: Dictionary of filename -> content

        Returns:
            True if successful, False otherwise
        """
        try:
            logger.info(f"Deploying documentation files to {self.docs_dir}")

            # Ensure docs directory exists
            self.docs_dir.mkdir(exist_ok=True)

            # Write all markdown files
            for filename, content in markdown_files.items():
                file_path = self.docs_dir / filename
                with open(file_path, "w", encoding="utf-8") as f:
                    f.write(content)
                logger.debug(f"Written {filename} to docs directory")

            logger.info(f"Successfully deployed {len(markdown_files)} documentation files")
            return True

        except Exception as e:
            logger.error(f"Error deploying documentation: {e!s}")
            return False


def deploy_etl_results(
    df: pd.DataFrame,
    summary: Dict[str, Any],
    project_name: str,
    site_name: Optional[str] = None,
    site_description: Optional[str] = None,
) -> Optional[str]:
    """Helper function to deploy ETL results as MkDocs documentation.

    Args:
        df: Processed DataFrame
        summary: ETL processing summary
        project_name: Project name for documentation
        site_name: Optional custom site name
        site_description: Optional custom site description

    Returns:
        Documentation URL if successful, None otherwise
    """
    try:
        # Set default values
        site_name = site_name or project_name
        site_description = site_description or f"ETL Results Documentation for {project_name}"

        # Create temporary directory for templates
        temp_dir = Path("temp_templates")
        temp_dir.mkdir(exist_ok=True)

        # Initialise Markdown generator
        markdown_generator = MarkdownGenerator(str(temp_dir))

        # Create default template if it doesn't exist
        template_path = temp_dir / "data_report.md"
        if not template_path.exists():
            markdown_generator.create_default_template(str(template_path))

        # Generate markdown content
        temp_report_path = temp_dir / "temp_report.md"
        success = markdown_generator.generate_data_report(
            df, summary, str(temp_report_path), title=f"{project_name} - Data Report"
        )

        if not success:
            return None

        # Read the generated content
        with open(temp_report_path, "r", encoding="utf-8") as f:
            report_content = f.read()

        # Initialise MkDocs deployer
        mkdocs_deployer = MkDocsDeployer(
            site_name=site_name,
            site_description=site_description,
        )

        # Set up MkDocs structure
        mkdocs_deployer.setup_mkdocs_structure(project_name)

        # Deploy documentation
        markdown_files = {
            "data_report.md": report_content,
        }
        
        success = mkdocs_deployer.deploy_documentation(markdown_files)

        # Cleanup temporary directory
        import shutil
        shutil.rmtree(temp_dir)

        if success:
            docs_url = f"https://${{values.repository_owner}}.github.io/${{values.repository_name}}/"
            logger.info(f"Documentation will be available at: {docs_url}")
            return docs_url
        else:
            return None

    except Exception as e:
        logger.error(f"Error in deploy_etl_results: {e!s}")
        return None


def create_mkdocs_config(
    site_name: str = "${{values.docs_site_name}}",
    site_description: str = "${{values.docs_site_description}}",
    config_path: str = "mkdocs.yml",
) -> bool:
    """Create or update MkDocs configuration file.

    Args:
        site_name: Name of the documentation site
        site_description: Description of the site
        config_path: Path to the mkdocs.yml file

    Returns:
        True if successful, False otherwise
    """
    try:
        config = {
            "site_name": site_name,
            "site_description": site_description,
            "site_url": f"https://${{values.repository_owner}}.github.io/${{values.repository_name}}/",
            "repo_url": f"https://github.com/${{values.repository_owner}}/${{values.repository_name}}",
            "repo_name": "${{values.repository_name}}",
            "docs_dir": "docs",
            "site_dir": "site",
            "theme": {
                "name": "material",
                "palette": {
                    "scheme": "default",
                    "primary": "blue",
                    "accent": "blue",
                },
                "features": [
                    "navigation.tabs",
                    "navigation.sections",
                    "navigation.expand",
                    "navigation.top",
                    "search.highlight",
                    "search.share",
                ],
            },
            "markdown_extensions": [
                "admonition",
                "codehilite",
                "pymdownx.superfences",
                "pymdownx.tabbed",
                "toc",
                "tables",
            ],
            "nav": [
                {"Home": "index.md"},
                {"Data Report": "data_report.md"},
            ],
        }

        # Ensure directory exists
        Path(config_path).parent.mkdir(parents=True, exist_ok=True)

        # Write configuration
        with open(config_path, "w", encoding="utf-8") as f:
            yaml.dump(config, f, default_flow_style=False, sort_keys=False)

        logger.info(f"MkDocs configuration created: {config_path}")
        return True

    except Exception as e:
        logger.error(f"Error creating MkDocs configuration: {e!s}")
        return False
